=> To run cpp file
=> g++ <fileName> : Compiles the cpp file
=> -o out : It will make an executable file "out.exe"
=> ./out : run the executable file
=> < input.txt : take input from file "input.txt"
=> > output.txt : get out in file "ouput.txt"

/*******C++ COMMAND*********/
g++ l001.cpp -o out && ./out  < input.txt > output.txt


!--------------------------------------------------------------------------------------------------------!

=>To run java file
=> javac <fileName> : Compile java file (converts .java file to .class file)
=> java <classFileName> : Run java file
=> < input.txt : take input from file "input.txt"
=> > output.txt : get out in file "ouput.txt"

/******JAVA COMMAND*********/
javac l001.java && java l001 < input.txt > output.txt

!--------------------------------------------------------------------------------------------------------!

/*******Recursion**********/
=>All about Permutations and Combinations 

*Flood Fill (It is the base)
**REAL_LIFE_PUZZLES (Follow same pattern) [BACKTRACKING]
==>NQUEEN
==>SUDOKU
==>ENCODING
==>Rat_In_a_Maze
==>Coin_Change
==>N_Knights
==>CROSSWORD
==>CRYPTO
==>WORD_BREAK

/**IMPORTANT**/
==> Use of boolean array in PERMUTATIONS_WITHOUT_DUPLICATES vs COIN_CHANGE_PERMUTATIONS (Single coin allowed)

**In Coinchange problem,:
=> combination method : Coins have the control
=> subsequence method : Target has the control

=> Remember 8 trees of coinChange (combination + permutation && subsequence method)
=> (x+1)^n = 2^n (if x == 1)

!--------------------------------------------------------------------------------------------------------!

/*********Bits*************/

OPERATOR PRECEDENCE (! > & > |)

-> & -> AND
-> | -> OR
-> ^ -> XOR
-> ~ -> 1's complement
-> - -> 2's complement
-> ! -> NOT
